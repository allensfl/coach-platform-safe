import React, { useState } from 'react'
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'

// Mock Data - genau wie in deinem Original
const mockClients = [
  {
    id: '1',
    firstName: 'Sarah',
    lastName: 'Müller',
    email: 'sarah.mueller@example.com',
    phone: '+49 123 456789',
    company: 'Tech Solutions GmbH',
    status: 'active',
    totalSessions: 12,
    totalRevenue: 1800,
    currency: 'CHF',
    createdAt: new Date('2025-01-15'),
    topics: ['Teamführung', 'Work-Life-Balance'],
    isBusinessClient: false
  },
  {
    id: '2', 
    firstName: 'Michael',
    lastName: 'Schmidt',
    email: 'michael.schmidt@company.com',
    phone: '+49 987 654321',
    company: 'Schmidt Consulting',
    status: 'active',
    totalSessions: 8,
    totalRevenue: 2400,
    currency: 'CHF',
    createdAt: new Date('2025-02-01'),
    topics: ['Unternehmensstrategie', 'Delegation'],
    isBusinessClient: true,
    businessName: 'Schmidt Consulting'
  },
  {
    id: '3',
    firstName: 'Dr. Anna',
    lastName: 'Weber',
    email: 'anna.weber@medical.com',
    phone: '+49 555 123456',
    company: 'Universitätsklinikum',
    status: 'active',
    totalSessions: 6,
    totalRevenue: 1200,
    currency: 'EUR',
    createdAt: new Date('2025-02-15'),
    topics: ['Führung im Gesundheitswesen', 'Stress-Management'],
    isBusinessClient: false
  }
]

// 10 Coaching-Methoden - dein Herzstück!
const coachingMethods = [
  {
    id: 'systemisch',
    name: 'Systemisches Coaching',
    icon: '🌐',
    description: 'Ganzheitlicher Ansatz mit Fokus auf Beziehungen und Systeme',
    phases: [
      'Auftragsklärung und Systemerkundung',
      'Hypothesenbildung und Perspektivwechsel', 
      'Interventionen und Experimente',
      'Reflexion und Integration',
      'Transfer und Nachhaltigkeit'
    ],
    questions: [
      'Welche Systeme sind für Sie relevant?',
      'Wer gehört zu Ihrem wichtigsten System?',
      'Welche Rolle spielen Sie in diesem System?'
    ]
  },
  {
    id: 'loesungsorientiert',
    name: 'Lösungsorientiertes Coaching',
    icon: '💡',
    description: 'Fokus auf Lösungen statt Probleme nach Steve de Shazer',
    phases: [
      'Zieldefinition und gewünschte Zukunft',
      'Ressourcen und Ausnahmen erkunden',
      'Skalierungsfragen und kleine Schritte',
      'Lösungskonstruktion und Experimente',
      'Erfolg verstärken und stabilisieren'
    ],
    questions: [
      'Woran würden Sie merken, dass sich etwas verbessert hat?',
      'Was funktioniert bereits gut in Ihrem Leben?',
      'Auf einer Skala von 1-10, wo stehen Sie heute?'
    ]
  },
  {
    id: 'nlp',
    name: 'NLP-basiertes Coaching',
    icon: '🧠',
    description: 'Neurolinguistische Programmierung für Veränderung',
    phases: [
      'Rapport aufbauen und Ziele kalibrieren',
      'Ist-Zustand und gewünschter Zustand',
      'Ressourcen-Anker und Strategien',
      'Reframing und Perspektivwechsel',
      'Future Pace und Integration'
    ],
    questions: [
      'Was würden Sie sehen, hören, fühlen wenn Sie Ihr Ziel erreicht haben?',
      'Welche Ressourcen haben Sie bereits erfolgreich genutzt?',
      'Was hindert Sie daran, das zu bekommen was Sie wollen?'
    ]
  },
  {
    id: 'grow',
    name: 'GROW-Modell',
    icon: '🎯',
    description: 'Strukturierter Coaching-Prozess: Goal-Reality-Options-Will',
    phases: [
      'GOAL: Ziele definieren und konkretisieren',
      'REALITY: Ist-Situation ehrlich betrachten',
      'OPTIONS: Handlungsoptionen entwickeln',
      'WILL: Commitment und nächste Schritte',
      'Follow-up und Erfolgsmessung'
    ],
    questions: [
      'Was genau möchten Sie erreichen?',
      'Wo stehen Sie aktuell in Bezug auf dieses Ziel?',
      'Welche Optionen haben Sie zur Verfügung?',
      'Was werden Sie konkret tun?'
    ]
  },
  {
    id: 'werteorientiert',
    name: 'Werteorientiertes Coaching',
    icon: '⚖️',
    description: 'Coaching basierend auf persönlichen Werten und Prinzipien',
    phases: [
      'Werte-Exploration und Identifikation',
      'Werte-Hierarchie und Prioritäten',
      'Werte-Konflikte und Dilemmata',
      'Werte-kongruente Ziele entwickeln',
      'Werte-Integration im Alltag'
    ],
    questions: [
      'Was ist Ihnen wirklich wichtig im Leben?',
      'Wo leben Sie bereits im Einklang mit Ihren Werten?',
      'Welche Werte stehen manchmal in Konflikt?'
    ]
  },
  {
    id: 'gestalt',
    name: 'Gestalt-Coaching',
    icon: '🎭',
    description: 'Awareness und Kontakt im Hier und Jetzt',
    phases: [
      'Kontakt herstellen und Awareness schaffen',
      'Figur und Hintergrund erkunden',
      'Unerledigte Geschäfte identifizieren',
      'Experimente und neue Erfahrungen',
      'Integration und Abschluss'
    ],
    questions: [
      'Was nehmen Sie gerade wahr?',
      'Was beschäftigt Sie am meisten?',
      'Welche unerledigten Geschäfte haben Sie?'
    ]
  },
  {
    id: 'transformational',
    name: 'Transformationales Coaching',
    icon: '🔄',
    description: 'Tiefgreifende Persönlichkeitsentwicklung und Wandel',
    phases: [
      'Vision und Transformation erkunden',
      'Limiting Beliefs identifizieren',
      'Identitäts-Ebene bearbeiten',
      'Neue Narrative entwickeln',
      'Nachhaltiger Wandel integrieren'
    ],
    questions: [
      'Wer möchten Sie werden?',
      'Was hält Sie davon ab, sich zu verändern?',
      'Welche Geschichte erzählen Sie über sich?'
    ]
  },
  {
    id: 'ressourcenorientiert',
    name: 'Ressourcenorientiertes Coaching',
    icon: '💪',
    description: 'Stärken und Potentiale aktivieren',
    phases: [
      'Ressourcen-Inventar erstellen',
      'Verborgene Stärken entdecken',
      'Ressourcen-Transfer und -kombination',
      'Stärken-basierte Zielerreichung',
      'Ressourcen-Netzwerk aufbauen'
    ],
    questions: [
      'Was sind Ihre größten Stärken?',
      'Wann haben Sie diese erfolgreich eingesetzt?',
      'Welche Ressourcen übersehen Sie möglicherweise?'
    ]
  },
  {
    id: 'timeline',
    name: 'Timeline-Coaching',
    icon: '📈',
    description: 'Arbeit mit Vergangenheit, Gegenwart und Zukunft',
    phases: [
      'Timeline erstellen und erkunden',
      'Prägende Ereignisse identifizieren',
      'Ressourcen aus der Vergangenheit holen',
      'Zukunfts-Timeline gestalten',
      'Brücken zwischen Zeiten bauen'
    ],
    questions: [
      'Wie sieht Ihre Lebens-Timeline aus?',
      'Welche Ereignisse haben Sie geprägt?',
      'Wie stellen Sie sich Ihre Zukunft vor?'
    ]
  },
  {
    id: 'mindfulness',
    name: 'Mindfulness-Coaching',
    icon: '🧘',
    description: 'Achtsamkeitsbasiertes Coaching für mehr Bewusstheit',
    phases: [
      'Achtsamkeits-Assessment und Einstieg',
      'Körpergewahrsein entwickeln',
      'Gedanken und Emotionen beobachten',
      'Achtsame Entscheidungen treffen',
      'Achtsamkeit im Alltag integrieren'
    ],
    questions: [
      'Was nehmen Sie in diesem Moment wahr?',
      'Wie beeinflusst Ihre Atmung Ihr Befinden?', 
      'Welche Gedankenmuster bemerken Sie?'
    ]
  }
]

// Mock Analytics Data
const analyticsData = {
  totalSessions: 156,
  activeClients: 24,
  completedSessions: 134,
  thisWeekSessions: 12,
  monthlyRevenue: 8500,
  clientSatisfaction: 94,
  averageSessionRating: 4.7,
  coachingMethods: {
    'Systemisches Coaching': 45,
    'Lösungsorientiert': 38,
    'GROW-Modell': 32,
    'NLP-basiert': 24,
    'Werteorientiert': 17
  }
}

// Layout Component
const DashboardLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="flex">
        <div className="w-64 bg-white shadow-lg">
          <div className="p-6">
            <h1 className="text-xl font-bold text-gray-800">Coach Dashboard</h1>
            <p className="text-sm text-gray-600">Professional Edition</p>
          </div>
        </div>
        <div className="flex-1">
          {children}
        </div>
      </div>
    </div>
  )
}

function App() {
  const [activeTab, setActiveTab] = useState('dashboard')

  const tabs = [
    { id: 'dashboard', name: '🎯 Dashboard', icon: '📊' },
    { id: 'clients', name: '👥 Klienten', icon: '🏢' },
    { id: 'sessions', name: '📅 Sessions', icon: '🕐' },
    { id: 'documents', name: '📄 Dokumente', icon: '📁' },
    { id: 'analytics', name: '📊 Analytics', icon: '📈' },
    { id: 'settings', name: '⚙️ Settings', icon: '🔧' }
  ]

  return (
    <Router>
      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center">
                <h1 className="text-2xl font-bold text-gray-900">Coach Dashboard</h1>
                <span className="ml-3 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                  Professional Edition
                </span>
              </div>
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-500">
                  {mockClients.length} Aktive Klienten
                </span>
              </div>
            </div>
          </div>
        </header>

        {/* Navigation */}
        <nav className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex space-x-8 overflow-x-auto">
              {tabs.map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors whitespace-nowrap ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  {tab.icon} {tab.name}
                </button>
              ))}
            </div>
          </div>
        </nav>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          {activeTab === 'dashboard' && (
            <div className="space-y-6">
              {/* Welcome Banner */}
              <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg shadow p-6 text-white">
                <h2 className="text-2xl font-bold mb-2">
                  Willkommen in Ihrem Coach Dashboard!
                </h2>
                <p className="opacity-90">
                  Verwalten Sie Ihre Klienten, Sessions und Coaching-Prozesse professionell.
                </p>
              </div>

              {/* KPI Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-white rounded-lg shadow p-6">
                  <div className="flex items-center">
                    <div className="p-3 rounded-full bg-blue-100">
                      <span className="text-2xl">📊</span>
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Heute</p>
                      <p className="text-2xl font-semibold text-gray-900">3</p>
                      <p className="text-xs text-blue-600">Sessions</p>
                    </div>
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow p-6">
                  <div className="flex items-center">
                    <div className="p-3 rounded-full bg-green-100">
                      <span className="text-2xl">📅</span>
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Diese Woche</p>
                      <p className="text-2xl font-semibold text-gray-900">{analyticsData.thisWeekSessions}</p>
                      <p className="text-xs text-green-600">Sessions</p>
                    </div>
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow p-6">
                  <div className="flex items-center">
                    <div className="p-3 rounded-full bg-purple-100">
                      <span className="text-2xl">👥</span>
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Aktive Klienten</p>
                      <p className="text-2xl font-semibold text-gray-900">{analyticsData.activeClients}</p>
                      <p className="text-xs text-purple-600">Gesamt</p>
                    </div>
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow p-6">
                  <div className="flex items-center">
                    <div className="p-3 rounded-full bg-orange-100">
                      <span className="text-2xl">✅</span>
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Abgeschlossen</p>
                      <p className="text-2xl font-semibold text-gray-900">{analyticsData.totalSessions}</p>
                      <p className="text-xs text-orange-600">Sessions</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Today's Schedule */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Heutiger Terminplan</h3>
                <div className="space-y-3">
                  {[
                    { time: '09:00', client: 'Sarah Müller', type: 'Systemisches Coaching', status: 'upcoming' },
                    { time: '11:00', client: 'Michael Schmidt', type: 'Business Coaching', status: 'upcoming' },
                    { time: '14:00', client: 'Dr. Anna Weber', type: 'GROW-Modell', status: 'upcoming' }
                  ].map((session, index) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50">
                      <div className="flex items-center">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mr-3"></div>
                        <div>
                          <p className="font-medium">{session.time} - {session.client}</p>
                          <p className="text-sm text-gray-500">{session.type}</p>
                        </div>
                      </div>
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                        Geplant
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Quick Actions */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {[
                    { name: 'Neue Session', icon: '📅', action: () => setActiveTab('sessions') },
                    { name: 'Neuer Klient', icon: '👤', action: () => setActiveTab('clients') },
                    { name: 'Dokumente', icon: '📄', action: () => setActiveTab('documents') },
                    { name: 'Analytics', icon: '📊', action: () => setActiveTab('analytics') }
                  ].map((action, index) => (
                    <button
                      key={index}
                      onClick={action.action}
                      className="flex flex-col items-center p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors"
                    >
                      <div className="text-2xl mb-2">{action.icon}</div>
                      <span className="text-sm font-medium text-gray-900">{action.name}</span>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'clients' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">Klienten-Verwaltung</h2>
                <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                  Neuer Klient
                </button>
              </div>

              <div className="bg-white rounded-lg shadow">
                <div className="px-6 py-4 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-medium text-gray-900">Alle Klienten</h3>
                    <span className="text-sm text-gray-500">{mockClients.length} Klienten</span>
                  </div>
                </div>
                <div className="divide-y divide-gray-200">
                  {mockClients.map((client) => (
                    <div key={client.id} className="px-6 py-4 hover:bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                            <span className="text-blue-600 font-medium">
                              {client.firstName.charAt(0)}{client.lastName.charAt(0)}
                            </span>
                          </div>
                          <div className="ml-4">
                            <p className="text-sm font-medium text-gray-900">
                              {client.firstName} {client.lastName}
                            </p>
                            <p className="text-sm text-gray-500">{client.email}</p>
                            {client.company && <p className="text-sm text-gray-500">{client.company}</p>}
                          </div>
                        </div>
                        <div className="flex items-center space-x-4">
                          <div className="text-right">
                            <p className="text-sm font-medium text-gray-900">
                              {client.totalSessions} Sessions
                            </p>
                            <p className="text-sm text-gray-500">
                              {client.totalRevenue} {client.currency}
                            </p>
                          </div>
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            client.status === 'active' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-gray-100 text-gray-800'
                          }`}>
                            {client.status === 'active' ? 'Aktiv' : 'Inaktiv'}
                          </span>
                          <button className="text-blue-600 hover:text-blue-800 text-sm">
                            Details
                          </button>
                        </div>
                      </div>
                      {client.topics && client.topics.length > 0 && (
                        <div className="mt-2 ml-14">
                          <div className="flex flex-wrap gap-1">
                            {client.topics.map((topic, index) => (
                              <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                                {topic}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'sessions' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">Session Management</h2>
                <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                  Neue Session planen
                </button>
              </div>

              {/* Coaching Methods */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">
                  10 Wissenschaftliche Coaching-Methoden
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {coachingMethods.map((method) => (
                    <div key={method.id} className="border rounded-lg p-4 hover:border-blue-500 hover:shadow-md transition-all cursor-pointer">
                      <div className="flex items-center mb-3">
                        <span className="text-2xl mr-3">{method.icon}</span>
                        <h4 className="font-medium text-gray-900">{method.name}</h4>
                      </div>
                      <p className="text-sm text-gray-600 mb-3">{method.description}</p>
                      
                      <div className="space-y-2">
                        <h5 className="text-xs font-medium text-gray-700 uppercase tracking-wide">
                          5-Phasen Struktur:
                        </h5>
                        <div className="space-y-1">
                          {method.phases.map((phase, index) => (
                            <div key={index} className="text-xs text-gray-600 flex items-center">
                              <span className="w-4 h-4 bg-blue-100 text-blue-600 rounded-full text-center mr-2 text-xs">
                                {index + 1}
                              </span>
                              {phase}
                            </div>
                          ))}
                        </div>
                      </div>

                      <div className="mt-3 pt-3 border-t">
                        <h5 className="text-xs font-medium text-gray-700 mb-1">Beispiel-Fragen:</h5>
                        <div className="text-xs text-gray-600">
                          • {method.questions[0]}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Recent Sessions */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Kürzliche Sessions</h3>
                <div className="space-y-3">
                  {[
                    { date: '2025-08-05', client: 'Sarah Müller', method: 'Systemisches Coaching', status: 'completed', duration: '60 min' },
                    { date: '2025-08-04', client: 'Michael Schmidt', method: 'GROW-Modell', status: 'completed', duration: '90 min' },
                    { date: '2025-08-03', client: 'Dr. Anna Weber', method: 'Lösungsorientiert', status: 'completed', duration: '60 min' }
                  ].map((session, index) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center">
                        <div className="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
                        <div>
                          <p className="font-medium">{session.client}</p>
                          <p className="text-sm text-gray-500">{session.method} • {session.duration}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="text-sm text-gray-900">{session.date}</p>
                        <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                          Abgeschlossen
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'documents' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">Dokumente</h2>
                <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                  Upload
                </button>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Dokument-Kategorien</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {[
                    { name: 'Session-Notizen', icon: '📝', count: 45 },
                    { name: 'Verträge', icon: '📋', count: 12 },
                    { name: 'Vorlagen', icon: '📄', count: 8 },
                    { name: 'Berichte', icon: '📊', count: 23 }
                  ].map((category, index) => (
                    <div key={index} className="border rounded-lg p-4 hover:border-blue-500 hover:shadow-md transition-all cursor-pointer">
                      <div className="text-center">
                        <div className="text-3xl mb-2">{category.icon}</div>
                        <h4 className="font-medium text-gray-900">{category.name}</h4>
                        <p className="text-sm text-gray-500">{category.count} Dokumente</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Zuletzt verwendet</h3>
                <div className="space-y-3">
                  {[
                    { name: 'Session-Notizen_Sarah_Müller_2025-08-05.pdf', type: 'PDF', size: '2.3 MB' },
                    { name: 'Coaching-Vertrag_Michael_Schmidt.docx', type: 'DOCX', size: '156 KB' },
                    { name: 'GROW-Template.pdf', type: 'PDF', size: '890 KB' }
                  ].map((doc, index) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50">
                      <div className="flex items-center">
                        <div className="w-8 h-8 bg-red-100 rounded flex items-center justify-center mr-3">
                          <span className="text-red-600 text-xs font-medium">{doc.type}</span>
                        </div>
                        <div>
                          <p className="font-medium text-sm">{doc.name}</p>
                          <p className="text-xs text-gray-500">{doc.size}</p>
                        </div>
                      </div>
                      <button className="text-blue-600 hover:text-blue-800 text-sm">
                        Öffnen
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'analytics' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-gray-900">Analytics & Reports</h2>

              {/* Key Metrics */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-sm font-medium text-gray-500 mb-2">Gesamtumsatz</h3>
                  <p className="text-3xl font-bold text-green-600">€{analyticsData.monthlyRevenue.toLocaleString()}</p>
                  <p className="text-sm text-gray-500">Diesen Monat</p>
                </div>

                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-sm font-medium text-gray-500 mb-2">Zufriedenheit</h3>
                  <p className="text-3xl font-bold text-blue-600">{analyticsData.clientSatisfaction}%</p>
                  <p className="text-sm text-gray-500">Client Satisfaction</p>
                </div>

                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-sm font-medium text-gray-500 mb-2">Durchschnitt</h3>
                  <p className="text-3xl font-bold text-purple-600">{analyticsData.averageSessionRating}</p>
                  <p className="text-sm text-gray-500">Session Rating</p>
                </div>

                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-sm font-medium text-gray-500 mb-2">Sessions</h3>
                  <p className="text-3xl font-bold text-orange-600">{analyticsData.completedSessions}</p>
                  <p className="text-sm text-gray-500">Abgeschlossen</p>
                </div>
              </div>

              {/* Coaching Methods Usage */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Methoden-Nutzung</h3>
                <div className="space-y-4">
                  {Object.entries(analyticsData.coachingMethods).map(([method, count]) => (
                    <div key={method} className="flex items-center justify-between">
                      <span className="text-sm font-medium text-gray-700">{method}</span>
                      <div className="flex items-center">
                        <div className="w-32 bg-gray-200 rounded-full h-2 mr-3">
                          <div 
                            className="bg-blue-600 h-2 rounded-full" 
                            style={{ width: `${(count / 45) * 100}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-600">{count}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Monthly Trends */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Monatliche Trends</h3>
                <div className="grid grid-cols-7 gap-2 mb-4">
                  {['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'].map((day) => (
                    <div key={day} className="text-center text-xs font-medium text-gray-500 py-2">
                      {day}
                    </div>
                  ))}
                </div>
                <div className="grid grid-cols-7 gap-2">
                  {Array.from({ length: 28 }, (_, i) => (
                    <div 
                      key={i} 
                      className={`h-8 rounded ${
                        Math.random() > 0.7 ? 'bg-green-200' : 
                        Math.random() > 0.4 ? 'bg-blue-100' : 'bg-gray-100'
                      } flex items-center justify-center text-xs`}
                    >
                      {i + 1}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'settings' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-gray-900">Einstellungen</h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Profile Settings */}
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Profil</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                      <input type="text" className="w-full border border-gray-300 rounded-lg px-3 py-2" defaultValue="Coach Professional" />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">E-Mail</label>
                      <input type="email" className="w-full border border-gray-300 rounded-lg px-3 py-2" defaultValue="coach@example.com" />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Spezialisierung</label>
                      <select className="w-full border border-gray-300 rounded-lg px-3 py-2">
                        <option>Business Coaching</option>
                        <option>Life Coaching</option>
                        <option>Executive Coaching</option>
                        <option>Team Coaching</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Business Settings */}
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Business</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Standard Session-Dauer</label>
                      <select className="w-full border border-gray-300 rounded-lg px-3 py-2">
                        <option>60 Minuten</option>
                        <option>90 Minuten</option>
                        <option>120 Minuten</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Standard-Preis</label>
                      <input type="number" className="w-full border border-gray-300 rounded-lg px-3 py-2" defaultValue="120" />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Währung</label>
                      <select className="w-full border border-gray-300 rounded-lg px-3 py-2">
                        <option>EUR</option>
                        <option>CHF</option>
                        <option>USD</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Notification Settings */}
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Benachrichtigungen</h3>
                  <div className="space-y-4">
                    {[
                      { name: 'Session-Erinnerungen', enabled: true },
                      { name: 'Neue Klient-Anfragen', enabled: true },
                      { name: 'Feedback-Benachrichtigungen', enabled: false },
                      { name: 'Wöchentliche Reports', enabled: true }
                    ].map((setting, index) => (
                      <div key={index} className="flex items-center justify-between">
                        <span className="text-sm text-gray-700">{setting.name}</span>
                        <button className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none ${
                          setting.enabled ? 'bg-blue-600' : 'bg-gray-200'
                        }`}>
                          <span className={`pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out ${
                            setting.enabled ? 'translate-x-5' : 'translate-x-0'
                          }`} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Data & Privacy */}
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Datenschutz</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-700">DSGVO-Compliance</span>
                      <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Aktiv</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-700">Daten-Backup</span>
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">Täglich</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-700">Aufbewahrungszeit</span>
                      <span className="text-sm text-gray-600">7 Jahre</span>
                    </div>
                    <button className="w-full bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 text-sm">
                      Alle Daten exportieren
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </Router>
  )
}

export default App